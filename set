package kse.unit5.challenge

import kse.unit4.challenge.numerals.Numeral
import scala.annotation.targetName

object set:

  trait NumeralSet:

    infix def forAll(predicate: Numeral => Boolean): Boolean

    infix def exists(predicate: Numeral => Boolean): Boolean

    infix def contains(x: Numeral): Boolean

    infix def include(x: Numeral): NumeralSet

    // Optional
    // Uncomment if needed
//    infix def remove(x: Numeral): NumeralSet

    @targetName("union")
    infix def ∪(that: NumeralSet): NumeralSet

    @targetName("intersection")
    infix def ∩(that: NumeralSet): NumeralSet

  // Optional
  // Uncomment if needed
//    @targetName("difference")
//    infix def \(that: NumeralSet): NumeralSet

  // Optional
  // Uncomment if needed
//    @targetName("symmetric difference")
//    infix def ∆(that: NumeralSet): NumeralSet = ???

  end NumeralSet

  type Empty = Empty.type

  case object Empty extends NumeralSet:

    infix def forAll(predicate: Numeral => Boolean): Boolean = true

    infix def exists(predicate: Numeral => Boolean): Boolean = false

    infix def contains(x: Numeral): Boolean = false

    infix def include(x: Numeral): NumeralSet = NonEmpty(Empty, x, Empty)

    // Optional
    // Uncomment if needed
//    infix def remove(x: Numeral): NumeralSet = ???

    @targetName("union")
    infix def ∪(that: NumeralSet): NumeralSet = that

    @targetName("intersection")
    infix def ∩(that: NumeralSet): NumeralSet = this

    // Optional
    // Uncomment if needed
//    @targetName("difference")
//    infix def \(that: NumeralSet): NumeralSet = ???

    override def toString: String = "[*]"

    override def equals(obj: Any): Boolean = obj match
      case Empty => true
      case _     => false

  end Empty

  case class NonEmpty(left: NumeralSet, element: Numeral, right: NumeralSet) extends NumeralSet:

    infix def forAll(predicate: Numeral => Boolean): Boolean =
      left.forAll(predicate) && predicate(element) && right.forAll(predicate)

    infix def exists(predicate: Numeral => Boolean): Boolean =
      left.exists(predicate) || predicate(element) || right.exists(predicate)

    infix def contains(x: Numeral): Boolean =
      left.contains(x) || element == x || right.contains(x)

    infix def include(x: Numeral): NumeralSet =
      if (contains(x)) this
      else NonEmpty(left.include(x), element, right)

    // Optional
    // Uncomment if needed
//    infix def remove(x: Numeral): NumeralSet = ???

    @targetName("union")
    infix def ∪(that: NumeralSet): NumeralSet =
      left ∪ (right ∪ that) ∪ NonEmpty(Empty, element, Empty)

    @targetName("intersection")
    infix def ∩(that: NumeralSet): NumeralSet =
      if (that.contains(element)) NonEmpty(left ∩ that, element, right ∩ that)
      else left ∩ right

    // Optional
    // Uncomment if needed
//    @targetName("difference")
//    infix def \(that: NumeralSet): NumeralSet = ???

    override def toString: String = s"[$left - [$element] - $right]"

    override def equals(obj: Any): Boolean = obj match
      case NonEmpty(l, e, r) => l == left && e == element && r == right
      case _                 => false

  end NonEmpty

end set
